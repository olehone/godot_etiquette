extends Node


## Whether additional debug messages are enabled or not.
const DEBUG_LOG: bool = true


## This dictionary stores all [AudioStreamPlayer]s that are already loaded. [br]
## This method prevents duplicates of existing [AudioStreamPlayer]s being instanced.
var loaded: Dictionary[String, AudioStreamPlayer] = {}


## Creates a new [AudioStreamPlayer] and plays it with the given [param settings]. [br]
## However, if an [AudioStreamPlayer] has already been loaded with the exact same settings,
## said [AudioStreamPlayer] will be used instead for optimization purposes.
func play(settings: AudioSettings) -> void:
	# Create a variable to store the AudioStreamPlayer that will be used to play the sound.
	var audio_player: AudioStreamPlayer
	
	# Check if this audio has already been loaded.
	if loaded.has(settings.path):
		# Use the existing AudioStreamPlayer.
		audio_player = loaded[settings.path]
	else:
		# Create a new AudioStreamPlayer.
		audio_player = AudioStreamPlayer.new()
		add_child(audio_player)
	
	# Setup the AudioStreamPlayer.
	audio_player.stream = load(settings.path)
	audio_player.bus = settings.bus
	audio_player.volume_linear = settings.volume
	audio_player.pitch_scale = settings.pitch_scale
	audio_player.max_polyphony = settings.max_polyphony
	audio_player.mix_target = settings.mix_target
	audio_player.playback_type = settings.playback_type
	
	# Make the settings persistent.
	if settings.persistent:
		loaded[settings.path] = audio_player
	else:
		audio_player.finished.connect(func _on_audio_player_finished() -> void:
			audio_player.queue_free()
		)
	
	# Play the AudioStreamPlayer.
	audio_player.play()
	
	# Debug log.
	if DEBUG_LOG:
		print("Playing SFX %s at bus \"%s\" with volume and pitch, %s and %s, respectively" % [
			settings.path,
			settings.bus,
			str(settings.volume * 100.0) + "%",
			str(settings.pitch_scale) + "x",
		])


## Cleans up all [member loaded] [AudioStreamPlayer]s.
func clean_up() -> void:
	# Debug log.
	if DEBUG_LOG:
		print("Cleaning up " + str(loaded.size()) + " sounds from memory")
	
	# Queue free all children.
	for child: Node in get_children():
		child.queue_free()
	
	# Reset the loaded dictionary.
	loaded = {}


## An object that stores all AudioStreamPlayer settings that are used by Audio.play().
class AudioSettings:
	## The path or UID to the [AudioStream] resource to be played. [br]
	## Setting this property stops all currently playing sounds. If left empty, the [AudioStreamPlayer] does not work.
	var path: String = "" : set = set_path
	
	## The target bus name. All sounds from this node will be playing on this bus. [br][br]
	## [b]Note:[/b] At runtime, if no bus with the given name exists, all sounds will fall back on "Master". See also [method AudioServer.get_bus_name].
	var bus: String = "Master" : set = set_bus
	
	## Volume of sound, as a linear value. [br][br]
	## [b]Note:[/b] This member modifies [member AudioStreamPlayer.volume_db] for convenience.
	## The returned value is equivalent to the result of [method @GlobalScope.db_to_linear] on [member AudioStreamPlayer.volume_db].
	## Setting this member is equivalent to setting [member AudioStreamPlayer.volume_db] to the result of [method @GlobalScope.linear_to_db] on a value.
	var volume: float = 1.0 : set = set_volume
	
	## The audio's pitch and tempo, as a multiplier of the [AudioStream]'s sample rate. [br][br]
	## A value of [code]2.0[/code] doubles the audio's pitch, while a value of [code]0.5[/code] halves the pitch.
	var pitch_scale: float = 1.0 : set = set_pitch_scale
	
	## The maximum number of sounds this node can play at the same time. [br]
	## Calling [method AudioStreamPlayer.play] after this value is reached will cut off the oldest sounds.
	var max_polyphony = 1 : set = set_max_polyphony
	
	## The mix target channels, as one of the [member AudioStreamPlayer.MixTarget] constants. [br]
	## Has no effect when two speakers or less are detected (see [member AudioServer.SpeakerMode]).
	var mix_target: AudioStreamPlayer.MixTarget = AudioStreamPlayer.MixTarget.MIX_TARGET_STEREO : set = set_mix_target
	
	## @experimental
	## The playback type of the stream player. [br]
	## If set other than to the default value, it will force that playback type.
	var playback_type: AudioServer.PlaybackType = AudioServer.PlaybackType.PLAYBACK_TYPE_DEFAULT : set = set_playback_type
	
	## Whether the [AudioStreamPlayer] generated by this [Audio.AudioSettings] can be stored for future use or not.
	var persistent: bool = true : set = set_persistance
	
	
	## Updates the [AudioStream] resource path or UID and returns the updated [Audio.AudioSettings] for convenience.
	func set_path(_path: String) -> AudioSettings:
		path = _path
		return self
	
	
	## Updates the target bus name and returns the updated [Audio.AudioSettings] for convenience.
	func set_bus(_bus: String) -> AudioSettings:
		bus = _bus
		return self
	
	
	## Updates the linear volume and returns the updated [Audio.AudioSettings] for convenience.
	func set_volume(_volume: float) -> AudioSettings:
		volume = _volume
		return self
	
	
	## Updates the pitch scale and returns the updated [Audio.AudioSettings] for convenience.
	func set_pitch_scale(_pitch_scale: float) -> AudioSettings:
		pitch_scale = _pitch_scale
		return self
	
	
	## Updates the max polyphony and returns the updated [Audio.AudioSettings] for convenience.
	func set_max_polyphony(_max_polyphony: int) -> AudioSettings:
		max_polyphony = _max_polyphony
		return self
	
	
	## Updates the mix target and returns the updated [Audio.AudioSettings] for convenience.
	func set_mix_target(_mix_target: AudioStreamPlayer.MixTarget) -> AudioSettings:
		mix_target = _mix_target
		return self
	
	
	## Updates the playback type and returns the updated [Audio.AudioSettings] for convenience.
	func set_playback_type(_playback_type: AudioServer.PlaybackType) -> AudioSettings:
		playback_type = _playback_type
		return self
	
	
	## Updates the persistance of this [Audio.AudioSettings] and returns the updated [Audio.AudioSettings] for convenience.
	func set_persistance(_persistent: bool) -> AudioSettings:
		persistent = _persistent
		return self
